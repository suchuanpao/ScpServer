

关于开发前的任务职责分配模式1

一个项目：水平分模块
            上下分层次


#版权所属人：苏传跑
#email：suchuanpao@outlook.com
#转发者应注明出处

# 不同任务的职责：

    写代码过程中，开发者应当明确各自的职责，而写出不越界管理的代码，比如库开发者过度的保护使用者，
使得库代码冗杂和降低效率，所以开发前，要明确各自的职责。

    第一种类型的任务：   （底层库开发者）开发的库是提供更高层一级的（高层库开发者）库调用
            
        职责： 1、发生错误处理    （出错相信是自己的错误，确保自己代码逻辑无错误）
                            1、开发阶段，如果是使用库的开发者不遵循库使用规则，则直接assert()，抛出错误，
                            中断程序，因为这是严重错误，必然只会在开发阶段才会出现。虽然assert()影响效率，但是在版本发布时，
                            会定义  NDEBUG的宏，使得assert无效，assert是用于开发阶段的好帮手。
                            注：版本发布者应当先重新编译整个库，定义NDEBUG宏，再去编译应用程序。
                            2、测试阶段，对于难以根治，且运行时间长才会出现的问题需要长时间跟踪，将耗费极大的成本。
                            因此，为了便于维护，或调试，#1、库开发则需要提供错误字符串，用errno和error_string数组实现。
                            应用开发根据调佣strerrno接口获得字符串.当不提供定义SCP_ERRSTR时取消所有有关error
                            和error_string的定义以及函数，#2、同时errno应当能够判断该错误是下一层（被调用者）返回的，还是
                            自己的，如果是下一层的，则调用下层的库提供的错误打印，返回下层的错误字符串，否则返回自己的。
                            3、为上层提供错误消息返回的接口，由定义宏SCP_ERRSTR有效


    第二种类型的任务：      开发的库是直接提供给应用开发者
                1、         （出错相信是自己的错误，确保自己代码逻辑无错误）

                    



    第三种类型任务：         直接使用库开发应用
