思考：
    关于写一个库怎么样能做到尽善尽美
    很难得到正确，所以我尽量先写一个库
    将一个库修改到满意，然后再写第二个，有了第一个的经验
    第二个的效率会大大提高，写好代码的能力在工作希望也能有所体现

ScpSockClass套接字：
    1.由于sock套接字可以进行多线程操作，所以对sock添加一个initLock函数，
    当read/write消息时，判断initLock函数是否为null，如果initLoc接口可调用，
    则对initLock上锁


报错机制：
    2.虽然调用strerrno或者perror可以获得最底层的错误，和应用程序出错的位置，
    但在测试软件时，长时间运行代码，才会出现错误.
    此时可以通过sterrno得知底层错误，也可以通过应用程序打印，知道是哪个库调用出错，
    但是有时候有些问题必须长时间运行代码，才会出现错误，
    写入日志文件（发布版本的程序出错，查看日志寻找原因）；
    比如一个不常用的堆栈溢出,还有些基本库不依赖于任何库的单纯的算法问题，如果出错都会带来维护的成本，
    此时可以通过定义宏 SCP_ERRSTR来编译库，使得各个库实现的对象拥有 strerror的接口，并内嵌error错误代号。

关于返回值问题：
    每一个库都拥有相对的独立性，所以返回值不必严格统一，可定义各自模块的返回值，
    但尽量保持成功调用时返回0值的枚举宏。

    而错误永远不是调用者产生的，产生错误的是调用的库，所以错误的消息由库开发者提供，
    而应用开发者选择打印或者记录信息。

应当做:
    每个对象或库 都自定义一个错误数组，并定义一个errno,当应用层需要答应时，调用strerrno接口返回字符串

    超长时间的测试通过以后取消定义SCP_ERRSTR来取消strerrno接口和错误描述数组。以及应用层也使错误消息打印的宏无效。



